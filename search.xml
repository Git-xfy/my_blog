<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>git学习记录</title>
      <link href="/2025/04/22/git%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
      <url>/2025/04/22/git%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Git学习笔记"><a href="#Git学习笔记" class="headerlink" title="Git学习笔记"></a>Git学习笔记</h1><hr><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h2><p>在官方网站安装: <a href="https://git-scm.com/">https://git-scm.com/</a></p><hr><h2 id="2-初始化配置"><a href="#2-初始化配置" class="headerlink" title="2. 初始化配置"></a>2. 初始化配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置全局用户名和邮箱</span></span><br><span class="line">git config --global user.name <span class="string">&quot;name&quot;</span></span><br><span class="line">git config --global user.email xxxx@gmail.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 凭证存储</span></span><br><span class="line"><span class="comment"># 第一次通过 HTTPS 方式 push 或 pull 时，Git 会要求输入用户名和密码</span></span><br><span class="line"><span class="comment"># （或 Personal Access Token）。操作成功后，&quot;store&quot; 会把凭证以明文格式写入文件</span></span><br><span class="line"><span class="comment"># 以后再访问同一个远程仓库时，Git 会自动读取凭证，不再重复询问</span></span><br><span class="line">git config --global credential.helper store</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置默认分支，现在推荐使用main</span></span><br><span class="line">git config --global init.defaultBranch main</span><br></pre></td></tr></table></figure><hr><h2 id="3-创建一个新仓库"><a href="#3-创建一个新仓库" class="headerlink" title="3. 创建一个新仓库"></a>3. 创建一个新仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 初始化本地仓库</span></span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 克隆远程仓库</span></span><br><span class="line">git <span class="built_in">clone</span> &lt;仓库URL&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="4-工作区域和文件状态"><a href="#4-工作区域和文件状态" class="headerlink" title="4. 工作区域和文件状态"></a>4. 工作区域和文件状态</h2><h3 id="Git中的三种工作区域"><a href="#Git中的三种工作区域" class="headerlink" title="Git中的三种工作区域"></a>Git中的三种工作区域</h3><ol><li><p><strong>工作区</strong>(.git所在目录)</p><ul><li>在资源管理器中看到的目录</li></ul></li><li><p><strong>暂存区</strong>(.git&#x2F;index)</p><ul><li>用于保存即将提交到Git仓库的修改内容</li></ul></li><li><p><strong>本地仓库</strong>(.git&#x2F;objects)</p><ul><li>Git存储代码和版本信息的主要位置</li></ul></li></ol><p><img src="https://fyblog.oss-cn-shanghai.aliyuncs.com/blog/20250423151837456.png" alt="工作区域"></p><h3 id="Git中的四种文件状态"><a href="#Git中的四种文件状态" class="headerlink" title="Git中的四种文件状态"></a>Git中的四种文件状态</h3><p><img src="https://fyblog.oss-cn-shanghai.aliyuncs.com/blog/20250423153227238.png" alt="文件状态"></p><hr><h2 id="5-添加和提交文件"><a href="#5-添加和提交文件" class="headerlink" title="5. 添加和提交文件"></a>5. 添加和提交文件</h2><h3 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a><code>git status</code></h3><p>查看仓库的状态</p><h3 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a><code>git add</code></h3><p>将文件添加到暂存区</p><ul><li>可以使用通配符：<code>git add *.txt</code></li><li>也可以使用目录：<code>git add .</code></li></ul><h3 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a><code>git commit</code></h3><p>提交到本地仓库</p><ul><li>只提交<strong>暂存区</strong>中的内容，不会提交<strong>工作区</strong>中的内容</li></ul><h3 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a><code>git log</code></h3><p>查看仓库提交历史记录</p><ul><li>使用 <code>--oneline</code> 参数查看简洁的提交记录</li></ul><h3 id="git-ls-files"><a href="#git-ls-files" class="headerlink" title="git ls-files"></a><code>git ls-files</code></h3><p>查看暂存区的内容</p><hr><h2 id="6-git-reset回退版本"><a href="#6-git-reset回退版本" class="headerlink" title="6. git reset回退版本"></a>6. git reset回退版本</h2><h3 id="Git-reset的三种模式"><a href="#Git-reset的三种模式" class="headerlink" title="Git reset的三种模式"></a>Git reset的三种模式</h3><ul><li><p><code>git reset --soft</code> </p><ul><li>回退到某个版本，保留工作区和暂存区的所有内容</li></ul></li><li><p><code>git reset --hard</code> </p><ul><li>回退到某个版本，丢弃工作区和暂存区的所有内容</li></ul></li><li><p><code>git reset --mixed</code> (默认参数)</p><ul><li>回退到某个版本，保留工作区的内容，丢弃暂存区的内容</li></ul></li></ul><p><img src="https://fyblog.oss-cn-shanghai.aliyuncs.com/blog/20250423155650856.png" alt="Git reset模式"></p><hr><h2 id="7-使用git-diff查看差异"><a href="#7-使用git-diff查看差异" class="headerlink" title="7. 使用git diff查看差异"></a>7. 使用git diff查看差异</h2><h3 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a><code>git diff</code></h3><p>比较：<strong>工作区</strong> 🆚 <strong>暂存区</strong></p><h3 id="git-diff-HEAD"><a href="#git-diff-HEAD" class="headerlink" title="git diff HEAD"></a><code>git diff HEAD</code></h3><p>比较：<strong>工作区 + 暂存区</strong> 🆚 <strong>本地仓库</strong></p><h3 id="git-diff-cached-git-diff-staged"><a href="#git-diff-cached-git-diff-staged" class="headerlink" title="git diff --cached &#x2F; git diff --staged"></a><code>git diff --cached</code> &#x2F; <code>git diff --staged</code></h3><p>比较：<strong>暂存区</strong> 🆚 <strong>本地仓库</strong></p><h3 id="git-diff-1"><a href="#git-diff-1" class="headerlink" title="git diff &lt;commit_hash&gt; &lt;commit_hash&gt;"></a><code>git diff &lt;commit_hash&gt; &lt;commit_hash&gt;</code></h3><h3 id="git-diff-HEAD-HEAD"><a href="#git-diff-HEAD-HEAD" class="headerlink" title="git diff HEAD~ HEAD"></a><code>git diff HEAD~ HEAD</code></h3><p>比较两个**提交（commit）**之间的差异</p><h3 id="git-diff-2"><a href="#git-diff-2" class="headerlink" title="git diff &lt;branch_name&gt; &lt;branch_name&gt;"></a><code>git diff &lt;branch_name&gt; &lt;branch_name&gt;</code></h3><p>比较两个<strong>分支</strong>之间的差异</p><hr><h2 id="8-Git-删除文件命令"><a href="#8-Git-删除文件命令" class="headerlink" title="8. Git 删除文件命令"></a>8. Git 删除文件命令</h2><h3 id="rm-file-git-add-file"><a href="#rm-file-git-add-file" class="headerlink" title="rm file; git add file"></a><code>rm file; git add file</code></h3><ul><li>先从<strong>工作区</strong>删除文件</li><li>然后使用 <code>git add</code> 让 Git 追踪这次删除（即加入暂存区）</li></ul><h3 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm &lt;file&gt;"></a><code>git rm &lt;file&gt;</code></h3><ul><li>同时从<strong>工作区</strong>和<strong>暂存区</strong>删除文件</li></ul><h3 id="git-rm-cached"><a href="#git-rm-cached" class="headerlink" title="git rm --cached &lt;file&gt;"></a><code>git rm --cached &lt;file&gt;</code></h3><ul><li><strong>只从暂存区删除</strong>文件，但保留工作区中的文件（文件依然存在本地）</li></ul><h3 id="git-rm-r"><a href="#git-rm-r" class="headerlink" title="git rm -r *"></a><code>git rm -r *</code></h3><ul><li><strong>递归删除</strong>当前目录及子目录下的所有文件和文件夹</li></ul><blockquote><p><strong>提示</strong>：删除文件后记得使用 <code>git commit</code> 提交更改！</p></blockquote><hr><h2 id="9-gitignore忽略文件"><a href="#9-gitignore忽略文件" class="headerlink" title="9. gitignore忽略文件"></a>9. gitignore忽略文件</h2><h3 id="常见忽略文件列表"><a href="#常见忽略文件列表" class="headerlink" title="常见忽略文件列表"></a>常见忽略文件列表</h3><ul><li>忽略日志文件和日志目录</li><li>忽略所有 <code>.class</code> 文件</li><li>忽略所有 <code>.o</code> 文件（编译生成的中间文件）</li><li>忽略所有 <code>.env</code> 文件（包含环境变量配置）</li><li>忽略所有 <code>.zip</code> 和 <code>.tar</code> 压缩包</li><li>忽略所有 <code>.pem</code> 文件（安全凭证）</li></ul><h3 id="一般应该忽略的文件类型"><a href="#一般应该忽略的文件类型" class="headerlink" title="一般应该忽略的文件类型"></a>一般应该忽略的文件类型</h3><ul><li><strong>系统或软件自动生成的文件</strong></li><li><strong>编译产生的中间文件和结果文件</strong></li><li><strong>运行时生成的日志、缓存、临时文件</strong></li><li><strong>涉及身份、密码、口令、秘钥等敏感信息的文件</strong></li></ul><h3 id="示例-gitignore-文件内容"><a href="#示例-gitignore-文件内容" class="headerlink" title="示例 .gitignore 文件内容"></a>示例 <code>.gitignore</code> 文件内容</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 日志文件</span><br><span class="line">*.log</span><br><span class="line"></span><br><span class="line"># 编译输出</span><br><span class="line">*.class</span><br><span class="line">*.o</span><br><span class="line"></span><br><span class="line"># 环境变量</span><br><span class="line">.env</span><br><span class="line"></span><br><span class="line"># 压缩包</span><br><span class="line">*.zip</span><br><span class="line">*.tar</span><br><span class="line"></span><br><span class="line"># 安全证书等敏感信息</span><br><span class="line">*.pem</span><br></pre></td></tr></table></figure><hr><h2 id="10-SSH配置"><a href="#10-SSH配置" class="headerlink" title="10. SSH配置"></a>10. SSH配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 回到根目录</span></span><br><span class="line"><span class="built_in">cd</span> ~ 或者 <span class="built_in">cd</span> 直接回车</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 进入ssh文件夹</span></span><br><span class="line"><span class="built_in">cd</span> .ssh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 生成ssh密钥</span></span><br><span class="line">ssh-keygen -t rsa -b 4096</span><br><span class="line"><span class="comment"># -t代表协议为rsa</span></span><br><span class="line"><span class="comment"># -b代表生成大小</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 回车后提醒输入密钥名称</span></span><br><span class="line"><span class="comment"># 如果是第一次使用这个命令，直接回车就行了，使用默认的名称id_rsa</span></span><br><span class="line"><span class="comment"># 如果之前用过最好不要直接回车，会覆盖掉之前的密钥，且操作不可逆</span></span><br><span class="line"><span class="comment"># 输入一个新的名字例如test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 再回车后提醒输入密码，可以为空直接回车</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. 可以看到本地生成了两个文件，一个密钥，一个密钥.pub</span></span><br><span class="line"><span class="comment"># 私钥文件谁都不要给，公钥打开复制到github</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 7. 点开头像-设置-ssh和gpg密钥配置--new ssh key --然后起个名字将公钥粘贴进去</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 8. 如果是第一次配置默认的名称，到此就结束了</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 9. 如果是自己命名的密钥</span></span><br><span class="line"><span class="comment"># 打开 ~/.ssh/config 文件，如果没有就创建，如果有就附加在后面</span></span><br><span class="line"><span class="comment"># 填入</span></span><br><span class="line"><span class="comment"># github</span></span><br><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/test</span><br><span class="line"><span class="comment"># 意思是访问github时指定访问test密钥</span></span><br></pre></td></tr></table></figure><h3 id="SSH通过HTTPS端口连接GitHub-解决网络问题"><a href="#SSH通过HTTPS端口连接GitHub-解决网络问题" class="headerlink" title="SSH通过HTTPS端口连接GitHub (解决网络问题)"></a>SSH通过HTTPS端口连接GitHub (解决网络问题)</h3><p>当无法通过SSH默认端口访问GitHub时，可以通过HTTPS端口(443)绕过：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑SSH配置文件</span></span><br><span class="line">nano ~/.ssh/config</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">vim ~/.ssh/config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加以下配置</span></span><br><span class="line">Host github.com</span><br><span class="line">    HostName ssh.github.com</span><br><span class="line">    Port 443</span><br><span class="line">    User git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试连接</span></span><br><span class="line">ssh -T git@github.com</span><br><span class="line"><span class="comment"># 成功会显示：Hi username! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 现在可以正常克隆仓库</span></span><br><span class="line">git <span class="built_in">clone</span> git@github.com:Git-xfy/remote-repo.git</span><br></pre></td></tr></table></figure><p><strong>这种方法有效的原因</strong>:</p><ol><li>许多公司和网络环境会阻止SSH的标准端口(22)，但允许HTTPS端口(443)</li><li>这种方法仍使用SSH协议及其安全特性和密钥认证</li><li>通信通过通常允许的HTTPS端口传输，从而绕过防火墙限制</li></ol><hr><h2 id="11-关联本地仓库和远程仓库"><a href="#11-关联本地仓库和远程仓库" class="headerlink" title="11. 关联本地仓库和远程仓库"></a>11. 关联本地仓库和远程仓库</h2><h3 id="git-remote-add"><a href="#git-remote-add" class="headerlink" title="git remote add &lt;shortname&gt; &lt;url&gt;"></a><code>git remote add &lt;shortname&gt; &lt;url&gt;</code></h3><ul><li>shortname - 起一个短名字，一般都是origin</li><li>url - 要关联的远程仓库地址</li></ul><h3 id="git-remote-v"><a href="#git-remote-v" class="headerlink" title="git remote -v"></a><code>git remote -v</code></h3><p>查看当前仓库所对应的远程仓库的别名和地址</p><h3 id="git-branch-M-main"><a href="#git-branch-M-main" class="headerlink" title="git branch -M main"></a><code>git branch -M main</code></h3><p>将本地仓库当前分支命名为main</p><ul><li>GitHub默认的主分支名称是main，而本地分支有时候默认是master</li><li>如果已经设置过默认分支为main，则不需要此操作</li></ul><h3 id="git-push-u-origin-main"><a href="#git-push-u-origin-main" class="headerlink" title="git push -u origin main"></a><code>git push -u origin main</code></h3><p>把本地分支和远程分支的main关联起来</p><ul><li>全称是<code>git push -u origin main:main</code></li><li>将本地的main分支（冒号前）与远程main分支（冒号后）关联起来</li><li>名称一样可以省略一个</li></ul><h3 id="简化命令"><a href="#简化命令" class="headerlink" title="简化命令"></a>简化命令</h3><ul><li>关联后可以直接使用 <code>git push</code></li><li>未关联则需使用 <code>git push &lt;remote_name&gt; &lt;local_branch_name&gt;:&lt;remote_branch_name&gt;</code></li></ul><h3 id="拉取命令"><a href="#拉取命令" class="headerlink" title="拉取命令"></a>拉取命令</h3><ul><li>关联后：<code>git pull</code></li><li>未关联：<code>git pull &lt;remote_name&gt; &lt;local_branch_name&gt;:&lt;remote_branch_name&gt;</code></li><li>省略时默认拉取origin的main分支</li><li><code>git pull</code> 会自动合并，如有冲突需解决</li><li><code>git fetch</code> 是获取后不自动合并</li></ul><p><img src="https://fyblog.oss-cn-shanghai.aliyuncs.com/blog/20250423170207574.png" alt="拉取示意图"></p><hr><h2 id="12-分支的基本操作"><a href="#12-分支的基本操作" class="headerlink" title="12. 分支的基本操作"></a>12. 分支的基本操作</h2><h3 id="查看分支列表"><a href="#查看分支列表" class="headerlink" title="查看分支列表"></a>查看分支列表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch &lt;branch-name&gt;</span><br></pre></td></tr></table></figure><h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 传统方式</span></span><br><span class="line">git checkout &lt;branch-name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推荐方式（Git 2.23+）</span></span><br><span class="line">git switch &lt;branch-name&gt;</span><br></pre></td></tr></table></figure><h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge &lt;branch-name&gt;</span><br></pre></td></tr></table></figure><h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><ul><li><strong>已合并的分支</strong>:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d &lt;branch-name&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>未合并的分支</strong>:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -D &lt;branch-name&gt;</span><br></pre></td></tr></table></figure><blockquote><p><strong>提示</strong>：分支操作前，建议先查看当前分支状态：<code>git status</code>。合并前确保工作区干净，删除前确认无误。</p></blockquote><hr><h2 id="13-解决合并冲突"><a href="#13-解决合并冲突" class="headerlink" title="13. 解决合并冲突"></a>13. 解决合并冲突</h2><h3 id="冲突说明"><a href="#冲突说明" class="headerlink" title="冲突说明"></a>冲突说明</h3><ul><li><strong>若两个分支修改了同一个文件的不同位置</strong> → Git会自动合并 ✓</li><li><strong>若两个分支修改了同一个文件的相同位置</strong> → 发生冲突 ✗</li></ul><h3 id="解决冲突步骤"><a href="#解决冲突步骤" class="headerlink" title="解决冲突步骤"></a>解决冲突步骤</h3><ol><li><strong>手动修改冲突文件</strong>，处理冲突内容</li><li><strong>添加到暂存区</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;file&gt;</span><br></pre></td></tr></table></figure></li><li><strong>提交更改</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;解决合并冲突&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="中止合并操作"><a href="#中止合并操作" class="headerlink" title="中止合并操作"></a>中止合并操作</h3><p>如果不想继续合并，可使用以下命令中止合并过程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge --abort</span><br></pre></td></tr></table></figure><blockquote><p><strong>提示</strong>：合并冲突发生时，Git会标记冲突区域（如 <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>, <code>=======</code>, <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>），你需要手动选择保留哪一部分内容。</p></blockquote><hr><h2 id="14-回退和Rebase"><a href="#14-回退和Rebase" class="headerlink" title="14. 回退和Rebase"></a>14. 回退和Rebase</h2><h3 id="Git-Rebase（变基）"><a href="#Git-Rebase（变基）" class="headerlink" title="Git Rebase（变基）"></a>Git Rebase（变基）</h3><h4 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase &lt;branch-name&gt;</span><br></pre></td></tr></table></figure><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>将当前分支的提交”转移”到目标分支的最新提交之后，<strong>重写提交历史</strong>。</p><h3 id="Rebase-vs-Merge-区别"><a href="#Rebase-vs-Merge-区别" class="headerlink" title="Rebase vs Merge 区别"></a>Rebase vs Merge 区别</h3><table><thead><tr><th>比较项</th><th><code>git merge</code></th><th><code>git rebase</code></th></tr></thead><tbody><tr><td>历史记录</td><td>保留分支历史，产生合并提交</td><td>重写提交历史，线性、干净</td></tr><tr><td>可读性</td><td>可能出现分叉，历史分支交错</td><td>历史更线性，便于回顾</td></tr><tr><td>是否生成新提交</td><td>会生成一个合并提交</td><td>不会生成合并提交，重用原提交</td></tr><tr><td>冲突处理</td><td>只处理一次冲突</td><td>每次变基提交可能都需手动解决冲突</td></tr></tbody></table><h3 id="什么时候用什么？"><a href="#什么时候用什么？" class="headerlink" title="什么时候用什么？"></a>什么时候用什么？</h3><ul><li><p><strong>使用 <code>merge</code></strong>：</p><ul><li>团队协作中保留分支历史</li><li>避免修改提交历史</li><li>合并已推送的公共分支</li></ul></li><li><p><strong>使用 <code>rebase</code></strong>：</p><ul><li>自己在本地整理提交历史</li><li>保持提交历史简洁、线性</li><li>合并前清理开发分支历史，提升可读性</li></ul></li></ul><blockquote><p><strong>小提示</strong>：</p><ul><li><code>rebase</code> 更适合<strong>个人分支开发阶段</strong></li><li><code>merge</code> 更适合<strong>团队协作与主分支合并</strong></li><li>注意：不要对已经推送到远程的公共分支使用 <code>rebase</code>，可能导致历史冲突！</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
